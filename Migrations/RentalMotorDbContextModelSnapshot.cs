// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentalMotor.Api.Repository.Context;

#nullable disable

namespace RentalMotor.Api.Migrations
{
    [DbContext(typeof(RentalMotorDbContext))]
    partial class RentalMotorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentalMotor.Api.Entities.Cnh", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<List<string>>("CnhCategories")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ImagenCnh")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberCnh")
                        .HasColumnType("integer");

                    b.Property<string>("UserMotorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserMotorId")
                        .IsUnique();

                    b.ToTable("cnhs");
                });

            modelBuilder.Entity("RentalMotor.Api.Entities.ContractUserFoorPlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CostPerDay")
                        .HasColumnType("integer");

                    b.Property<int>("CountCurrentDays")
                        .HasColumnType("integer");

                    b.Property<int>("CountDay")
                        .HasColumnType("integer");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FloorPlanCountDay")
                        .HasColumnType("integer");

                    b.Property<string>("ForecastEndDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotorPlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PenaltyMissingDaysValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PenaltyOverDaysValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PenaltyPorcent")
                        .HasColumnType("numeric");

                    b.Property<string>("StarDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserMotorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserMotorId");

                    b.ToTable("contractUserFoorPlans");
                });

            modelBuilder.Entity("RentalMotor.Api.Entities.FoorPlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CostPerDay")
                        .HasColumnType("integer");

                    b.Property<int>("CountDay")
                        .HasColumnType("integer");

                    b.Property<decimal>("PenaltyPorcent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("foorPlans");
                });

            modelBuilder.Entity("RentalMotor.Api.Entities.UserMotor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("usersMotors");
                });

            modelBuilder.Entity("RentalMotor.Api.Entities.Cnh", b =>
                {
                    b.HasOne("RentalMotor.Api.Entities.UserMotor", "UserMotor")
                        .WithOne("Cnh")
                        .HasForeignKey("RentalMotor.Api.Entities.Cnh", "UserMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMotor");
                });

            modelBuilder.Entity("RentalMotor.Api.Entities.ContractUserFoorPlan", b =>
                {
                    b.HasOne("RentalMotor.Api.Entities.UserMotor", "UserMotor")
                        .WithMany("ContractUserFoorPlan")
                        .HasForeignKey("UserMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMotor");
                });

            modelBuilder.Entity("RentalMotor.Api.Entities.UserMotor", b =>
                {
                    b.Navigation("Cnh");

                    b.Navigation("ContractUserFoorPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
